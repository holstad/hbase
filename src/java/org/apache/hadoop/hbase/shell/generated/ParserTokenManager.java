/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package org.apache.hadoop.hbase.shell.generated;
/**
 * Copyright 2007 The Apache Software Foundation
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.io.StringReader;
import java.io.Reader;
import org.apache.hadoop.hbase.shell.*;

public class ParserTokenManager implements ParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000000L) != 0L)
            return 31;
         if ((active0 & 0x7fff01ffffffe0L) != 0L)
         {
            jjmatchedKind = 55;
            return 0;
         }
         return -1;
      case 1:
         if ((active0 & 0x100002000L) != 0L)
            return 0;
         if ((active0 & 0x7fff00ffffdfe0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
            return 0;
         }
         return -1;
      case 2:
         if ((active0 & 0x20000082000000L) != 0L)
            return 0;
         if ((active0 & 0x5fff007dffdfe0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
            return 0;
         }
         return -1;
      case 3:
         if ((active0 & 0x80001015720L) != 0L)
            return 0;
         if ((active0 & 0x5ff7007cfe88c0L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 55;
               jjmatchedPos = 3;
            }
            return 0;
         }
         return -1;
      case 4:
         if ((active0 & 0x1000408200c0L) != 0L)
            return 0;
         if ((active0 & 0x5fe7003c7c8a00L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
            return 0;
         }
         return -1;
      case 5:
         if ((active0 & 0x402000041c8800L) != 0L)
            return 0;
         if ((active0 & 0x1fc70038600200L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
            return 0;
         }
         return -1;
      case 6:
         if ((active0 & 0x200000L) != 0L)
            return 0;
         if ((active0 & 0x1fc70038400200L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
            return 0;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000400200L) != 0L)
            return 0;
         if ((active0 & 0x17c70038000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 7;
            return 0;
         }
         return -1;
      case 8:
         if ((active0 & 0x400010000000L) != 0L)
            return 0;
         if ((active0 & 0x17870028000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 8;
            return 0;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000000000L) != 0L)
            return 0;
         if ((active0 & 0x17850028000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 9;
            return 0;
         }
         return -1;
      case 10:
         if ((active0 & 0x14840000000000L) != 0L)
            return 0;
         if ((active0 & 0x3010028000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 10;
            return 0;
         }
         return -1;
      case 11:
         if ((active0 & 0x10020000000L) != 0L)
            return 0;
         if ((active0 & 0x3000008000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 11;
            return 0;
         }
         return -1;
      case 12:
         if ((active0 & 0x3000008000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 12;
            return 0;
         }
         return -1;
      case 13:
         if ((active0 & 0x8000000L) != 0L)
            return 0;
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 13;
            return 0;
         }
         return -1;
      case 14:
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 14;
            return 0;
         }
         return -1;
      case 15:
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 15;
            return 0;
         }
         return -1;
      case 16:
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 16;
            return 0;
         }
         return -1;
      case 17:
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 17;
            return 0;
         }
         return -1;
      case 18:
         if ((active0 & 0x3000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 18;
            return 0;
         }
         return -1;
      case 19:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 19;
            return 0;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 35);
      case 41:
         return jjStopAtPos(0, 36);
      case 42:
         return jjStopAtPos(0, 39);
      case 44:
         return jjStopAtPos(0, 33);
      case 46:
         return jjStartNfaWithStates_0(0, 34, 31);
      case 59:
         return jjStopAtPos(0, 61);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 61:
         return jjStopAtPos(0, 37);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000080000040L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x900000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x41040008000880L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x241600L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x104000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1002000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x400000018000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x30000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x18080020000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2200002000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x480100L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10020000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000004000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x30004020000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x62000000c0620L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000800100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x50200000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000000000c0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x400080118000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10c000a000000L);
      case 82:
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 0);
         return jjMoveStringLiteralDfa2_0(active0, 0x1001800L);
      case 83:
      case 115:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 0);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000020000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000500000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4200000000000L);
      case 68:
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 0);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 53, 0);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800880L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0c0020L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x18040070000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x900001001100L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x208600L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000010040L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 87:
      case 119:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 0);
         break;
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x18030020000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200880L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 67:
      case 99:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000200L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x100c8040L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      case 77:
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x41000000000000L);
      case 79:
      case 111:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x2a00000000000L);
      case 80:
      case 112:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 0);
         else if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00000L);
      case 84:
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 0);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xc000000L);
      case 87:
      case 119:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 0);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 0);
         return jjMoveStringLiteralDfa5_0(active0, 0x10400004000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L);
      case 75:
      case 107:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 0);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000100000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800008000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L);
      case 82:
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 6, 0);
         else if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 7, 0);
         return jjMoveStringLiteralDfa5_0(active0, 0x240000008200L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 84:
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 0);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000440800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x10020000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 68:
      case 100:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 0);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 0);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 0);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 0);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 0);
         return jjMoveStringLiteralDfa6_0(active0, 0x70020000000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000400200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000008000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 0);
         break;
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 0);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 0);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 21, 0);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x1020000400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x10020000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x8040000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 9, 0);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 71:
      case 103:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 22, 0);
         return jjMoveStringLiteralDfa8_0(active0, 0x1020000000000L);
      case 72:
      case 104:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 0);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x10400000000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x4050020000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x14050020000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 80:
      case 112:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 28, 0);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x820000000000L);
      case 89:
      case 121:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 46, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x10800000000000L);
      case 72:
      case 104:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 41, 0);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x50020000000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 50, 0);
         break;
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000008000000L);
      case 78:
      case 110:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 42, 0);
         return jjMoveStringLiteralDfa11_0(active0, 0x10020000000L);
      case 82:
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 47, 0);
         break;
      case 83:
      case 115:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 52, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(11, 29, 0);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 40, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x3000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 77:
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000000000L);
      case 83:
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(13, 27, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000000000L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 48, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 49, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 31;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAddTwoStates(2, 3);
                  }
                  else if ((0x400e00000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(0);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x400e00000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(0);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 34)
                     jjCheckNAdd(7);
                  if (curChar == 46)
                     jjCheckNAdd(2);
                  break;
               case 0:
                  if ((0x400e00000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 34)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 34 && kind > 59)
                     kind = 59;
                  break;
               case 9:
                  if (curChar == 39)
                     jjCheckNAddStates(7, 9);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 11:
                  if (curChar == 39)
                     jjCheckNAddStates(10, 12);
                  break;
               case 12:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               case 14:
                  if (curChar == 39 && kind > 60)
                     kind = 60;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAddStates(0, 6);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(16);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 46)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 31:
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(13, 14);
                  break;
               case 7:
                  jjAddStates(15, 16);
                  break;
               case 10:
                  jjCheckNAddStates(7, 9);
                  break;
               case 13:
                  jjCheckNAddStates(10, 12);
                  break;
               case 20:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(17, 18);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(19, 20);
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(10, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 31 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   16, 17, 18, 23, 24, 27, 28, 10, 12, 14, 12, 13, 14, 4, 5, 7, 
   8, 21, 22, 25, 26, 29, 30, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\54", "\56", "\50", "\51", "\75", "\74\76", 
"\52", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\73", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3bffffffffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[31];
private final int[] jjstateSet = new int[62];
protected char curChar;
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 31; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
